--Tests RunWithTestEZ.
--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Test = require(ReplicatedStorage.AvantRuntime.State.Test.Test)
local ModuleSandbox = require(ReplicatedStorage.AvantRuntime.State.ModuleSandbox)
local RunWithTestEZ = require(ReplicatedStorage.AvantRuntime.Runner.RunWithTestEZ)

return function()
    describe("The RunWithTestEZ function", function()
        local TestTest, TestModuleSandbox = nil, nil
        beforeEach(function()
            TestTest = Test.new()
            TestModuleSandbox = ModuleSandbox.new()
        end)

        afterEach(function()
            TestTest:Destroy()
            TestModuleSandbox:Destroy()
        end)

        it("should run simple functions.", function()
            TestModuleSandbox.EnvironmentOverrides.TestValue = 3
            RunWithTestEZ(TestTest, function()
                local ModuleScript = Instance.new("ModuleScript")
                ModuleScript.Source = "return TestValue"
                
                assert(TestTest.State == "IN_PROGRESS")
                assert(getfenv().TestValue == 3)
                assert(require(ModuleScript) :: number == 3)
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("PASSED")
            expect(#TestTest.ChildTests).to.equal(0)
            expect(next(TestModuleSandbox.ModuleLookup) :: any).to.never.equal(nil)
        end)

        it("should run simple expectations.", function()
            TestModuleSandbox.EnvironmentOverrides.TestValue = 3
            RunWithTestEZ(TestTest, function()
                expect(TestTest.State).to.equal("IN_PROGRESS")
                expect(getfenv().TestValue).to.equal(3)
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("PASSED")
            expect(#TestTest.ChildTests).to.equal(0)
        end)

        it("should output messages.", function()
            RunWithTestEZ(TestTest, function()
                print("Test print")
                warn("Test warn")
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("PASSED")
            expect(#TestTest.Output).to.equal(2)
            expect(TestTest.Output[1].MessageType).to.equal(Enum.MessageType.MessageOutput)
            expect(TestTest.Output[1].Contents[1]).to.equal("Test print")
            expect(TestTest.Output[2].MessageType).to.equal(Enum.MessageType.MessageWarning)
            expect(TestTest.Output[2].Contents[1]).to.equal("Test warn")
        end)

        it("should store errors.", function()
            RunWithTestEZ(TestTest, function()
                error("Test error")
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("FAILED")
            expect(#TestTest.Output).to.equal(2)
            expect(TestTest.Output[1].MessageType).to.equal(Enum.MessageType.MessageError)
            expect(string.find(TestTest.Output[1].Contents[1], "Test error") :: any).to.never.equal(nil)
            expect(TestTest.Output[2].MessageType).to.equal(Enum.MessageType.MessageInfo)
            expect(string.find(TestTest.Output[2].Contents[1], "RunWithTestEZ.spec") :: any).to.never.equal(nil)
        end)

        it("should work with TestEZ describe.", function()
            RunWithTestEZ(TestTest, function()
                print("Test print 1")
                describe("A test message", function()
                    print("Test print 2")
                end)
                print("Test print 3")
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("PASSED")
            expect(#TestTest.Output).to.equal(2)
            expect(TestTest.Output[1].Contents[1]).to.equal("Test print 1")
            expect(TestTest.Output[2].Contents[1]).to.equal("Test print 3")
            expect(#TestTest.ChildTests).to.equal(1)
            expect(TestTest.ChildTests[1].Name).to.equal("A test message")
            expect(TestTest.ChildTests[1].State).to.equal("PASSED")
            expect(TestTest.ChildTests[1].Output[1].Contents[1]).to.equal("Test print 2")
        end)

        it("should work with TestEZ describe and it.", function()
            RunWithTestEZ(TestTest, function()
                print("Test print 1")
                describe("A test message", function()
                    print("Test print 2")
                    it("should print to the correct test 1.", function()
                        print("Test print 3")
                    end)
                    it("should print to the correct test 2.", function()
                        print("Test print 4")
                    end)
                    it("should fail.", function()
                        error("Test error")
                    end)
                end)
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("PASSED")
            expect(#TestTest.Output).to.equal(1)
            expect(TestTest.Output[1].Contents[1]).to.equal("Test print 1")
            expect(#TestTest.ChildTests).to.equal(1)
            expect(TestTest.ChildTests[1].Name).to.equal("A test message")
            expect(TestTest.ChildTests[1].State).to.equal("PASSED")
            expect(TestTest.ChildTests[1].Output[1].Contents[1]).to.equal("Test print 2")
            expect(#TestTest.ChildTests[1].ChildTests).to.equal(3)
            expect(TestTest.ChildTests[1].ChildTests[1].Name).to.equal("should print to the correct test 1.")
            expect(TestTest.ChildTests[1].ChildTests[1].State).to.equal("PASSED")
            expect(TestTest.ChildTests[1].ChildTests[1].Output[1].Contents[1]).to.equal("Test print 3")
            expect(TestTest.ChildTests[1].ChildTests[2].Name).to.equal("should print to the correct test 2.")
            expect(TestTest.ChildTests[1].ChildTests[2].State).to.equal("PASSED")
            expect(TestTest.ChildTests[1].ChildTests[2].Output[1].Contents[1]).to.equal("Test print 4")
            expect(TestTest.ChildTests[1].ChildTests[3].Name).to.equal("should fail.")
            expect(TestTest.ChildTests[1].ChildTests[3].State).to.equal("FAILED")
        end)

        it("should output to the correct test.", function()
            RunWithTestEZ(TestTest, function()
                local function PrintTest()
                    print("Test print")
                end
                
                describe("A test message", function()
                    it("should print to the correct test.", function()
                        PrintTest()
                    end)
                end)
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("PASSED")
            expect(#TestTest.Output).to.equal(0)
            expect(#TestTest.ChildTests).to.equal(1)
            expect(TestTest.ChildTests[1].Name).to.equal("A test message")
            expect(TestTest.ChildTests[1].State).to.equal("PASSED")
            expect(#TestTest.ChildTests[1].Output).to.equal(0)
            expect(#TestTest.ChildTests[1].ChildTests).to.equal(1)
            expect(TestTest.ChildTests[1].ChildTests[1].Name).to.equal("should print to the correct test.")
            expect(TestTest.ChildTests[1].ChildTests[1].State).to.equal("PASSED")
            expect(TestTest.ChildTests[1].ChildTests[1].Output[1].Contents[1]).to.equal("Test print")
        end)

        it("should output failed setups.", function()
            RunWithTestEZ(TestTest, function()
                describe("A test with a failed setup", function()
                    beforeEach(function()
                        error("Test Error")
                    end)
                    it("should fail.", function() print("Should not print") end)
                end)
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("PASSED")
            expect(#TestTest.Output).to.equal(0)
            expect(TestTest.ChildTests[1].Name).to.equal("A test with a failed setup")
            expect(TestTest.ChildTests[1].State).to.equal("FAILED")
            expect(#TestTest.ChildTests[1].Output).to.equal(2)
            expect(#TestTest.ChildTests[1].ChildTests).to.equal(1)
            expect(TestTest.ChildTests[1].ChildTests[1].Name).to.equal("should fail.")
            expect(TestTest.ChildTests[1].ChildTests[1].State).to.equal("NOT_RUN")
            expect(#TestTest.ChildTests[1].ChildTests[1].Output).to.equal(0)
            expect(#TestTest.ChildTests[1].ChildTests[1].ChildTests).to.equal(0)
        end)

        it("should output failed teardowns.", function()
            RunWithTestEZ(TestTest, function()
                describe("A test with a failed setup", function()
                    afterEach(function()
                        error("Test Error")
                    end)
                    it("should fail.", function() print("Should print") end)
                end)
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("PASSED")
            expect(#TestTest.Output).to.equal(0)
            expect(TestTest.ChildTests[1].Name).to.equal("A test with a failed setup")
            expect(TestTest.ChildTests[1].State).to.equal("FAILED")
            expect(#TestTest.ChildTests[1].Output).to.equal(2)
            expect(#TestTest.ChildTests[1].ChildTests).to.equal(1)
            expect(TestTest.ChildTests[1].ChildTests[1].Name).to.equal("should fail.")
            expect(TestTest.ChildTests[1].ChildTests[1].State).to.equal("PASSED")
            expect(#TestTest.ChildTests[1].ChildTests[1].Output).to.equal(1)
            expect(#TestTest.ChildTests[1].ChildTests[1].ChildTests).to.equal(0)
        end)

        it("should skip tests.", function()
            RunWithTestEZ(TestTest, function()
                describe("A test", function()
                    it("should skip.", function()
                        SKIP()
                        error("Test error")
                    end)

                    itSKIP("should also skip.", function()
                        error("Test error")
                    end)

                    itFIXME("should skip with a warning.", function()
                        error("Test error")
                    end)
                end)

                describeSKIP("A skipped test", function() end)
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("PASSED")
            expect(#TestTest.Output).to.equal(0)
            expect(TestTest.ChildTests[1].Name).to.equal("A test")
            expect(TestTest.ChildTests[1].State).to.equal("PASSED")
            expect(#TestTest.ChildTests[1].Output).to.equal(0)
            expect(#TestTest.ChildTests[1].ChildTests).to.equal(3)
            expect(TestTest.ChildTests[1].ChildTests[1].Name).to.equal("should skip.")
            expect(TestTest.ChildTests[1].ChildTests[1].State).to.equal("SKIPPED")
            expect(#TestTest.ChildTests[1].ChildTests[1].Output).to.equal(2) --Skipped tests still run, but SKIPPED will be the status.
            expect(#TestTest.ChildTests[1].ChildTests[1].ChildTests).to.equal(0)
            expect(TestTest.ChildTests[1].ChildTests[2].Name).to.equal("should also skip.")
            expect(TestTest.ChildTests[1].ChildTests[2].State).to.equal("SKIPPED")
            expect(#TestTest.ChildTests[1].ChildTests[2].Output).to.equal(0)
            expect(#TestTest.ChildTests[1].ChildTests[2].ChildTests).to.equal(0)
            expect(TestTest.ChildTests[1].ChildTests[3].Name).to.equal("should skip with a warning.")
            expect(TestTest.ChildTests[1].ChildTests[3].State).to.equal("SKIPPED")
            expect(#TestTest.ChildTests[1].ChildTests[3].Output).to.equal(1)
            expect(TestTest.ChildTests[1].ChildTests[3].Output[1].MessageType).to.equal(Enum.MessageType.MessageWarning)
            expect(TestTest.ChildTests[1].ChildTests[3].Output[1].Contents[1]).to.equal("FIXME: broken test Unnamed A test should skip with a warning.")
            expect(#TestTest.ChildTests[1].ChildTests[3].ChildTests).to.equal(0)
            expect(TestTest.ChildTests[2].Name).to.equal("A skipped test")
            expect(TestTest.ChildTests[2].State).to.equal("SKIPPED")
            expect(#TestTest.ChildTests[2].Output).to.equal(0)
            expect(#TestTest.ChildTests[2].ChildTests).to.equal(0)
        end)

        it("should support TestEZ contexts.", function()
            RunWithTestEZ(TestTest, function()
                describe("A test with a context", function()
                    beforeEach(function(context: any)
                        context.TestValue = 5
                    end)
        
                    it("should pass in the context.", function(context: any)
                        expect(context.TestValue).to.equal(5)
                    end)
                end)
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("PASSED")
            expect(TestTest.ChildTests[1].Name).to.equal("A test with a context")
            expect(TestTest.ChildTests[1].State).to.equal("PASSED")
            expect(#TestTest.ChildTests[1].Output).to.equal(0)
            expect(#TestTest.ChildTests[1].ChildTests).to.equal(1)
            expect(TestTest.ChildTests[1].ChildTests[1].Name).to.equal("should pass in the context.")
            expect(TestTest.ChildTests[1].ChildTests[1].State).to.equal("PASSED")
            expect(#TestTest.ChildTests[1].ChildTests[1].Output).to.equal(0)
            expect(#TestTest.ChildTests[1].ChildTests[1].ChildTests).to.equal(0)
        end)

        it("should use the module sandbox.", function()
            RunWithTestEZ(TestTest, function()
                describe("A test with a ModuleScript", function()
                    local ModuleScript1 = Instance.new("ModuleScript")
                    ModuleScript1.Source = "local Total = 0 return function() Total += 1 return Total end"

                    local ModuleScript2 = Instance.new("ModuleScript")
                    ModuleScript2.Source = "local Total = 0 return function() Total += 1 return Total end"
                    local Run2 = require(ModuleScript2) :: () -> (number)
        
                    it("only return 1 total.", function(context: any)
                        expect((require(ModuleScript1) :: () -> (number))()).to.equal(1)
                        expect(Run2()).to.equal(1)
                    end)
        
                    it("also only return 1 total.", function(context: any)
                        expect((require(ModuleScript1) :: () -> (number))()).to.equal(1)
                        expect(Run2()).to.equal(2)
                    end)
                end)
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("PASSED")
            expect(TestTest.ChildTests[1].Name).to.equal("A test with a ModuleScript")
            expect(TestTest.ChildTests[1].State).to.equal("PASSED")
            expect(#TestTest.ChildTests[1].Output).to.equal(0)
            expect(#TestTest.ChildTests[1].ChildTests).to.equal(2)
            expect(TestTest.ChildTests[1].ChildTests[1].Name).to.equal("only return 1 total.")
            expect(TestTest.ChildTests[1].ChildTests[1].State).to.equal("PASSED")
            expect(#TestTest.ChildTests[1].ChildTests[1].Output).to.equal(0)
            expect(#TestTest.ChildTests[1].ChildTests[1].ChildTests).to.equal(0)
            expect(TestTest.ChildTests[1].ChildTests[2].Name).to.equal("also only return 1 total.")
            expect(TestTest.ChildTests[1].ChildTests[2].State).to.equal("PASSED")
            expect(#TestTest.ChildTests[1].ChildTests[2].Output).to.equal(0)
            expect(#TestTest.ChildTests[1].ChildTests[2].ChildTests).to.equal(0)
        end)

        it("should reuse and clear child tests.", function()
            TestTest.ContentState = "UPDATED"

            local DescribeTest = TestTest:CreateChildTest()
            DescribeTest.Name = "A test message"
            DescribeTest.State = "SKIPPED"

            local ItTest1 = DescribeTest:CreateChildTest()
            ItTest1.Name = "should print to the correct test."
            ItTest1.State = "SKIPPED"

            local ItTest2 = DescribeTest:CreateChildTest()
            ItTest2.Name = "should be removed."
            ItTest2.State = "SKIPPED"

            RunWithTestEZ(TestTest, function()
                print("Test print 1")
                describe("A test message", function()
                    print("Test print 2")
                    it("should print to the correct test.", function()
                        print("Test print 3")
                    end)
                    it("should fail.", function()
                        error("Test error")
                    end)
                end)
            end, TestModuleSandbox)
            expect(TestTest.State).to.equal("PASSED")
            expect(TestTest.ContentsState).to.equal("NORMAL")
            expect(#TestTest.Output).to.equal(1)
            expect(TestTest.Output[1].Contents[1]).to.equal("Test print 1")
            expect(#TestTest.ChildTests).to.equal(1)
            expect(TestTest.ChildTests[1]).to.equal(DescribeTest)
            expect(TestTest.ChildTests[1].Name).to.equal("A test message")
            expect(TestTest.ChildTests[1].State).to.equal("PASSED")
            expect(TestTest.ChildTests[1].Output[1].Contents[1]).to.equal("Test print 2")
            expect(#TestTest.ChildTests[1].ChildTests).to.equal(2)
            expect(TestTest.ChildTests[1].ChildTests[1]).to.equal(ItTest1)
            expect(TestTest.ChildTests[1].ChildTests[1].Name).to.equal("should print to the correct test.")
            expect(TestTest.ChildTests[1].ChildTests[1].State).to.equal("PASSED")
            expect(TestTest.ChildTests[1].ChildTests[1].Output[1].Contents[1]).to.equal("Test print 3")
            expect(TestTest.ChildTests[1].ChildTests[2].Name).to.equal("should fail.")
            expect(TestTest.ChildTests[1].ChildTests[2].State).to.equal("FAILED")
            expect(ItTest2.State).to.equal("NOT_RUN")
        end)
    end)
end